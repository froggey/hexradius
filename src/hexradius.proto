package protocol;

enum msgtype {
	INIT = 1;	// Sent by client after connect, supply player_name
	BEGIN = 2;	// Begin game
	TURN = 3;	// Set current turn to message.colour
	OK = 4;		// OK for player to move, client should wait for this
			// or BADMOVE after sending a move to the server before
			// allowing the player to try another one
	BADMOVE = 5;	// Last move rejected, try again
	QUIT = 6;	// Closing connection with supplied quit message
	PQUIT = 7;	// Player has quit
	PJOIN = 8;	// New player has joined
	GINFO = 9;	// Game info - sent to client if server accepts their INIT
			// Contains scenario and currently joined players
	GOVER = 10;	// Game over - player_id identifies the winning player
			// unless is_draw is true. Return to lobby.
	CCOLOUR = 11;	// Change a single player's colour, can be used by host
			// or the target player.
	CHAT = 12;	// Chat message - Message text is in message and player_id
			// will be set by server when redistributing the message.

	MOVE = 21;	// Move a single pawn
	USE = 22;	// Use a power
	UPDATE = 23;	// Update {pawn,tile}(s) attributes (flags, powers, etc)
	FORCE_MOVE = 24;// Forcibly move a single pawn.
	PAWN_ANIMATION = 25; // Play a pawn animation.
	TILE_ANIMATION = 26; // Play a tile animation.
	PARTICLE_ANIMATION = 27; // Play a particle animation.
	ADD_POWER_NOTIFICATION = 28; // Display a power added message.
									// pawn->use_power is the power. Might not be supplied.
	DESTROY = 29;   // Destroy a pawn.
	USE_POWER_NOTIFICATION = 30; // Display a power added message.
									// pawn->use_power is the power. Might not be supplied.
	CHANGE_MAP = 31;

	CHANGE_SETTING = 32;
	
	RESIGN = 33;
}

enum colour {
	BLUE = 0;
	RED = 1;
	GREEN = 2;
	YELLOW = 3;
	PURPLE = 4;
	ORANGE = 5;
	SPECTATE = 6;
}

message power {
	required uint32 index = 1;
	required uint32 num = 2;
}

message tile {
	required uint32 col = 1;
	required uint32 row = 2;
	optional sint32 height = 3;
	optional bool power = 4;
	optional bool smashed = 5;
	optional bool has_mine = 6;
	optional uint32 mine_colour = 7;
	optional bool has_landing_pad = 8;
	optional uint32 landing_pad_colour = 9;
	optional bool has_black_hole = 10;
	optional uint32 black_hole_power = 11;
	optional uint32 wrap = 12;
	optional bool has_eye = 13;
	optional uint32 eye_colour = 14;
}

message pawn {
	// Identifies pawn by current/old location
	//
	required uint32 col = 1;
	required uint32 row = 2;

	// Used to set/update pawn information
	//
	optional colour colour = 11;
	optional uint32 range = 12;
	optional uint32 flags = 13;
	repeated power powers = 15;

	// Used to move/update pawn
	//
	optional uint32 new_row = 21;
	optional uint32 new_col = 22;

	// Used by PAWN_USE
	//
	optional uint32 use_power = 31;
}

message player {
	optional string name = 1;
	optional colour colour = 2;
	optional uint32 id = 3;
}

message scenario {
	optional string name = 1;
}

message key_value {
	required string key = 1;
	optional int32 int_value = 2;
	optional float float_value = 3;
	optional string string_value = 4;
}

message message {
	required msgtype msg = 1;

	optional string player_name = 2;
	optional uint32 player_id = 3;

	repeated tile tiles = 4;
	repeated pawn pawns = 5;
	repeated player players = 8;
	optional scenario scenario = 9;

	optional string quit_msg = 11;
	optional bool is_draw = 12;
	optional string msgtext = 14;

	optional string animation_name = 15;
	repeated key_value misc = 16;

	optional string map_name = 17;

	optional bool fog_of_war = 18;
}
